
#![feature(untagged_unions)]
use std::mem::size_of;

#[derive(Debug, Copy)]
#[repr(C)]
struct digital {
    id : u16,
    pin : u16,
    rw : u8,
    action : u8
}

struct analog {
    id : u16,
    pin : u16,
    rw : u8,
    action : u8
}




impl Clone for Dmsg {
    fn clone(&self) -> Dmsg {*self}
}









#[repr(C)]
union s_d {
    msg : Dmsg,
    serialized : [u8 ; size_of::<Dmsg>()]
}


fn main() {

    //     CombinedLogger::init(
    //     vec![
    //         TermLogger::new(LevelFilter::Warn, Config::default()).unwrap(),
    //         WriteLogger::new(LevelFilter::Info, Config::default(), File::create("my_rust_binary.log").unwrap()),
    //     ]
    // ).unwrap();

    let _d = Dmsg{id : 123, pin : 23, rw : 'w' as u8, action : 1  };
    let _sd= s_Dmsg{msg : _d.clone()};

    println!("{:?}", _d);
    println!("{:?}",size_of::<Dmsg>() );
    println!("{:?}", unsafe {_sd.serialized });
    println!("{:?}", unsafe {_sd.msg });

    println!("{:?}",size_of::<s_Dmsg>());
}