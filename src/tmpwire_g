


#[macro_use] 
extern crate log;
extern crate simplelog;
use simplelog::*;
use std::fs::File;

extern crate spidev;

use std::thread;
use std::time::Duration;


extern crate i2cdev;
use i2cdev::core::*;
use i2cdev::linux::{LinuxI2CDevice, LinuxI2CError};

    
pub mod ll_io {
    // add code here
    use spidev::{Spidev, SpidevOptions, SPI_MODE_0};
    use spidev::spidevioctl::SpidevTransfer;


    extern crate i2cdev;
    use i2cdev::core::*;
    use i2cdev::linux::{LinuxI2CDevice, LinuxI2CError};

    use std::thread;
    use std::time::Duration;

    
    pub struct Spi {
        dev: Spidev,
        logging : bool
    }

    impl Spi {
            pub fn new(_logging : bool) -> Spi{
                let mut spidev = Spidev::open("/dev/spidev0.0").unwrap();
                let options = SpidevOptions::new()
                                  .bits_per_word(8)
                                  .max_speed_hz(5000)
                                  .lsb_first(false)
                                  .mode(SPI_MODE_0)
                                  .build();

                spidev.configure(&options).unwrap();
                Spi{ dev: spidev,
                    logging : _logging}
            }


        pub fn write_respond(&self, _payload : &[u8]) -> String
        {
                // it will probobalby be worth it to some timing tests for wait on the transfer
            let mut rx_buf : Vec<u8> = Vec::with_capacity(_payload.len());

            for _i in 0.._payload.len() {
                rx_buf.push('\0' as u8);
            }

            let mut transfer = SpidevTransfer::read_write(&_payload, &mut rx_buf);
            
            let response = self.dev.transfer(&mut transfer);

            match response {
                Ok(_) => {match String::from_utf8(rx_buf){
                    Ok(n) => return n,
                    Err(e) => {if self.logging {error!("String failed to be created {:?} {} {}", e, file!(), line!())}
                        return String::new();}
                    }
                },
                Err(e) => {
                        if self.logging { error!("transfer Failed {:?} {} {}", e, file!(), line!())};
                        return String::new();
                },
            }

        }
    }

    pub struct ItwoC {
        dev : LinuxI2CDevice,
        logging : bool,
        register : u16
    }
    impl ItwoC {
        pub fn new(_logging : bool, r : u16) -> ItwoC{

            let dev_h = LinuxI2CDevice::new("/dev/i2c-1", r).unwrap();
        
            ItwoC{
                dev : dev_h,
                logging : _logging,
                register : r
            }
        }

        pub fn write_respond(mut self,  _payload : &[u8]) -> String
        {

            let mut rx_buf : Vec<u8> = Vec::with_capacity(_payload.len());

            for _i in _payload {
                rx_buf.push('\0' as u8);
            }
            println!("{:?}",rx_buf );

            match self.dev.write(_payload) {
                Ok(_) => {},
                Err(e) => if self.logging { error!("i2c write Failed {:?} {} {}", e, file!(), line!())}
            }

            match self.dev.read(&mut rx_buf){
                Ok(_)=>{},
                Err(e) =>if self.logging { error!("i2c read Failed {:?} {} {}", e, file!(), line!())}
            }

            match String::from_utf8(rx_buf) {
                Ok(data) => data,
                Err(e) =>  {if self.logging {error!("String failed to be created {:?} {} {}", e, file!(), line!())}
                        return String::new();}
            }
        }
    }

}

fn main() {

        CombinedLogger::init(
        vec![
            TermLogger::new(LevelFilter::Warn, Config::default()).unwrap(),
            WriteLogger::new(LevelFilter::Info, Config::default(), File::create("my_rust_binary.log").unwrap()),
        ]
    ).unwrap();

    let _s_dev = ll_io::Spi::new(true);

    let _i_dev = ll_io::ItwoC::new(true,8);
    _i_dev.write_respond("hello y")

    // let _w_buf = "hello\n".as_bytes();
    // let mut _r_buf : [u8; 6] = [0,0,0,0,0, 0];
    // let mut _dev_h = LinuxI2CDevice::new("/dev/i2c-1", 0x08).unwrap();


    // _dev_h.write(_w_buf);

    // thread::sleep(Duration::from_millis(10));

    // _dev_h.read(&mut _r_buf);
    // println!("{:?}", _r_buf);





}