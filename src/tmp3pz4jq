
#![feature(untagged_unions)]

use testcomm::messages::messages::;
use testcomm::ll_io::*;
use std::mem::size_of;





fn main() {

    //     CombinedLogger::init(
    //     vec![
    //         TermLogger::new(LevelFilter::Warn, Config::default()).unwrap(),
    //         WriteLogger::new(LevelFilter::Info, Config::default(), File::create("my_rust_binary.log").unwrap()),
    //     ]
    // ).unwrap();

    let _d = Digital{id : 123, pin : 23, rw : 'w' as u8, action : 1  };
    let _sd= s_Digital{msg : _d.clone()};

    let _a = Analog{id : 123, pin : 23, rw : 'w' as u8, action : 1234 };
    let _sa= s_Analog{msg : _a.clone()};

    let _s = Servo{id : 123, pin : 23, rw : 'w' as u8, degree : 124 };
    let _ss= s_Servo{msg : _s.clone()};

    println!("{:?}", _d);
    println!("{:?}",size_of::<Digital>() );
    println!("{:?}", unsafe {_sd.serialized });
    println!("{:?}", unsafe {_sd.msg });
    println!("{:?}",size_of::<s_Digital>());

    println!("{:?}", _a);
    println!("{:?}",size_of::<Analog>() );
    println!("{:?}", unsafe {_sa.serialized });
    println!("{:?}", unsafe {_sa.msg });
    println!("{:?}",size_of::<s_Analog>());

    println!("{:?}", _s);
    println!("{:?}",size_of::<Servo>() );
    println!("{:?}", unsafe {_ss.serialized });
    println!("{:?}", unsafe {_ss.msg });
    println!("{:?}",size_of::<s_Servo>());
}